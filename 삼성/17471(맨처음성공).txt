//17471

#include<iostream>
#include<vector>
#include<queue>
using namespace std;

int N;
int arr[11];
int graph[11][11];
int team[11];
int ans = 1000;
int a1, a2;

int min(int x, int y)
{
	if (x > y) return y;
	else return x;
}

void clear()
{
	for (int i = 1; i <= N; i++)
		team[i] = 0;
	a1 = 0; a2 = 0;
}

bool check()
{
	queue<int> q;
	int visit[11];
	for (int i = 1; i <= N; i++) visit[i] = -1;

	int start;
	for(int i = 1; i<=N; i++)
		if (team[i]) { start = i; break; }
	q.push(start);	visit[start] = 1;
	while (!q.empty())
	{
		start = q.front(); q.pop();
		a1 += arr[start];
		for(int i = 1; i<=N; i++)
			if (graph[start][i] && team[i] && visit[i] == -1)
			{
				q.push(i); visit[i] = 1;
			}
	}
	for(int i = 1; i<=N; i++)
		if (!team[i]) { start = i; break; }
	q.push(start); visit[start] = 0;
	while (!q.empty())
	{
		start = q.front(); q.pop();
		a2 += arr[start];
		for(int i = 1; i<=N; i++)
			if (graph[start][i] && !team[i] && visit[i] == -1)
			{
				q.push(i); visit[i] = 0;
			}
	}
	for (int i = 1; i <= N; i++)
		if (team[i] != visit[i])
			return false;
	return true;
}

int main()
{
	ios_base::sync_with_stdio(0); cin.tie(0);
	cin >> N;
	for (int i = 1; i <= N; i++)
		cin >> arr[i];
	int end,x;
	for (int i = 1; i <= N; i++)
	{
		cin >> end;
		for (int j = 0; j < end; j++)
		{
			cin >> x;
			graph[i][x] = 1;
			graph[x][i] = 1;
		}
	}
	int temp;
	for (int i = 1; i < (1 << N); i++)
	{
		clear();
		temp = i;
		int idx = 1;
		while (temp)
		{
			if (temp % 2)
				team[idx] = 1;
			++idx;
			temp /= 2;
		}
		if (!check()) continue;
		a1 = (a1 - a2 > 0 ? a1 - a2 : a2 - a1);
		ans = min(ans, a1);
	}
	if (ans == 1000)
		cout << -1;
	else
		cout << ans;
}