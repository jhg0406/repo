//2610

#include<iostream>
#include<vector>
#include<queue>
using namespace std;

int N, M;
vector<vector<int>> adj;
int cnum = 1;
vector<int> clubNum;
vector<int> Max;
vector<int> head;

void bfs(int start)
{
	vector<int> Cost(N + 1, -1);
	int club;
	if (!clubNum[start])
	{
		club = cnum++;
		Max.push_back(200);
		head.push_back(0);
	}
	else
		club = clubNum[start];
	queue<int> q;
	q.push(start);
	Cost[start] = 0;
	int cost, x;
	while (!q.empty())
	{
		x = q.front(); q.pop();
		cost = Cost[x];
		clubNum[x] = club;
		for (int i = 0; i < adj[x].size(); i++)
		{
			int there = adj[x][i];
			if (Cost[there] == -1)
			{
				q.push(there); Cost[there] = cost + 1;
			}
		}
	}
	if (Max[club] > cost)
	{
		Max[club] = cost; 
		head[club] = start;
	}
}

int main()
{
	ios_base::sync_with_stdio(0); cin.tie(0);
	cin >> N >> M;
	adj = vector<vector<int>>(N+1);
	clubNum = vector<int>(N + 1, 0);
	int x, y;
	for (int i = 0; i < M; i++)
	{
		cin >> x >> y;
		adj[x].push_back(y);
		adj[y].push_back(x);
	}
	Max.push_back(0); head.push_back(0);
	for (int i = 1; i <= N; i++)
		bfs(i);
	cout << Max.size()-1 << endl;
	priority_queue<int> pq;
	for (int i = 1; i < Max.size(); i++)
		pq.push(-1 * head[i]);
	while (!pq.empty())
	{
		cout << -1 * pq.top() << endl;
		pq.pop();
	}
}